<?php

namespace PHP\Lang;

\ClassLoader::import('PHP\Lang\Math.php');

/**
 * Test class for Math.
 * Generated by PHPUnit on 2011-07-31 at 22:39:30.
 */
class MathTest extends \PHPUnit_Framework_TestCase {
	public function testAbs() {
		try {
			Math::abs('3');
			$this->fail('Passing a non-integer to abs() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		$this->assertEquals(0, Math::abs(0));
		$this->assertEquals(3, Math::abs(3));
		$this->assertEquals(3, Math::abs(-3));
	}

	public function testCosAcos() {
		try {
			Math::cos('3');
			$this->fail('Passing a non-integer to cos() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		try {
			Math::acos('3');
			$this->fail('Passing a non-integer to acos() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		$this->assertEquals(0.5, Math::cos(Math::acos(0.5)), 'cos(acos(0.5)) is not 0.5', 0.01);
		$this->assertEquals(0.5, Math::acos(Math::cos(0.5)), 'acos(cos(0.5)) is not 0.5', 0.01);
	}

	public function testSinAsin() {
		try {
			Math::sin('3');
			$this->fail('Passing a non-integer to sin() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		try {
			Math::asin('3');
			$this->fail('Passing a non-integer to asin() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		$this->assertEquals(0.5, Math::sin(Math::asin(0.5)), 'sin(asin(0.5)) is not 0.5', 0.001);
		$this->assertEquals(0.5, Math::asin(Math::sin(0.5)), 'asin(sin(0.5)) is not 0.5', 0.001);
	}

	public function testTanAtan() {
		try {
			Math::tan('3');
			$this->fail('Passing a non-integer to tan() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		try {
			Math::atan('3');
			$this->fail('Passing a non-integer to atan() did not result in an error');
		} catch (\PHP\Lang\TypeError $e) {
			$this->assertContains('number', $e->getMessage());
		}
		$this->assertEquals(0.5, Math::tan(Math::atan(0.5)), 'tan(atan(0.5)) is not 0.5', 0.001);
		$this->assertEquals(0.5, Math::atan(Math::tan(0.5)), 'atan(tan(0.5)) is not 0.5', 0.001);
	}

	/**
	 * @todo Implement testCeil().
	 */
	public function testCeil() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testExp().
	 */
	public function testExp() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testFloor().
	 */
	public function testFloor() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testLog().
	 */
	public function testLog() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testMax().
	 */
	public function testMax() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testMin().
	 */
	public function testMin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testPow().
	 */
	public function testPow() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testRandom().
	 */
	public function testRandom() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testRound().
	 */
	public function testRound() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSqrt().
	 */
	public function testSqrt() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}
}
